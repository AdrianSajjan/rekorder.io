diff --git a/dist/es/components/AnimatePresence/PopChild.mjs b/dist/es/components/AnimatePresence/PopChild.mjs
index f81cf3410b86473bf037d21d4296bd985daca808..77e03708770548bf655f73232f18dd600bc76719 100644
--- a/dist/es/components/AnimatePresence/PopChild.mjs
+++ b/dist/es/components/AnimatePresence/PopChild.mjs
@@ -28,7 +28,7 @@ class PopChildMeasure extends React.Component {
         return this.props.children;
     }
 }
-function PopChild({ children, isPresent }) {
+function PopChild({ children, isPresent, root }) {
     const id = useId();
     const ref = useRef(null);
     const size = useRef({
@@ -55,7 +55,8 @@ function PopChild({ children, isPresent }) {
         const style = document.createElement("style");
         if (nonce)
             style.nonce = nonce;
-        document.head.appendChild(style);
+        const parent = root || document.body;
+        parent.appendChild(style);
         if (style.sheet) {
             style.sheet.insertRule(`
           [data-motion-pop-id="${id}"] {
@@ -68,7 +69,7 @@ function PopChild({ children, isPresent }) {
         `);
         }
         return () => {
-            document.head.removeChild(style);
+            parent.removeChild(style);
         };
     }, [isPresent]);
     return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));
diff --git a/dist/es/components/AnimatePresence/PresenceChild.mjs b/dist/es/components/AnimatePresence/PresenceChild.mjs
index 5ce38b0e9f55ebcb289705ad77b337ea5b5314e6..19534a364f958712f8e1409b18ba13564281b976 100644
--- a/dist/es/components/AnimatePresence/PresenceChild.mjs
+++ b/dist/es/components/AnimatePresence/PresenceChild.mjs
@@ -6,7 +6,7 @@ import { PresenceContext } from '../../context/PresenceContext.mjs';
 import { useConstant } from '../../utils/use-constant.mjs';
 import { PopChild } from './PopChild.mjs';
 
-const PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {
+const PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, root }) => {
     const presenceChildren = useConstant(newChildrenMap);
     const id = useId();
     const memoizedOnExitComplete = useCallback((childId) => {
@@ -50,7 +50,7 @@ const PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, p
             onExitComplete();
     }, [isPresent]);
     if (mode === "popLayout") {
-        children = jsx(PopChild, { isPresent: isPresent, children: children });
+        children = jsx(PopChild, { isPresent: isPresent, children: children, root: root });
     }
     return (jsx(PresenceContext.Provider, { value: context, children: children }));
 };
diff --git a/dist/es/components/AnimatePresence/index.mjs b/dist/es/components/AnimatePresence/index.mjs
index f175d9d2dd32619806d2828dd52235b0bdc44289..9748856ce2263807710f77fd0f7442d495f8d176 100644
--- a/dist/es/components/AnimatePresence/index.mjs
+++ b/dist/es/components/AnimatePresence/index.mjs
@@ -41,7 +41,7 @@ import { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs
  *
  * @public
  */
-const AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = "sync", propagate = false, }) => {
+const AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = "sync", propagate = false, root }) => {
     const [isParentPresent, safeToRemove] = usePresence(propagate);
     /**
      * Filter any children that aren't ReactElements. We can only track components
@@ -157,7 +157,7 @@ const AnimatePresence = ({ children, custom, initial = true, onExitComplete, pre
                     onExitComplete && onExitComplete();
                 }
             };
-            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial
+            return (jsx(PresenceChild, { root: root, isPresent: isPresent, initial: !isInitialRender.current || initial
                     ? undefined
                     : false, custom: isPresent ? undefined : custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, children: child }, key));
         }) }));
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 1e61c3501a150d67ddffd65162b8292bbd3371bf..cb871783c746d868da4012e0e8c58d0e2510503f 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -68,6 +68,11 @@ interface AnimatePresenceProps {
      * to its children.
      */
     propagate?: boolean;
+
+    /**
+     * Inject styles in main DOM or shadow DOM
+     */
+    root?: HTMLHeadElement | ShadowRoot
 }
 
 /**
