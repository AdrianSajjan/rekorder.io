/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ExtensionLayoutImport } from './routes/extension/_layout'
import { Route as DashboardLayoutImport } from './routes/dashboard/_layout'
import { Route as AuthLayoutImport } from './routes/auth/_layout'
import { Route as ExtensionLayoutRegisterImport } from './routes/extension/_layout.register'
import { Route as ExtensionLayoutLoginImport } from './routes/extension/_layout.login'
import { Route as ExtensionLayoutCallbackImport } from './routes/extension/_layout.callback'
import { Route as DashboardLayoutHomeImport } from './routes/dashboard/_layout.home'
import { Route as AuthLayoutRegisterImport } from './routes/auth/_layout.register'
import { Route as AuthLayoutLoginImport } from './routes/auth/_layout.login'
import { Route as AuthLayoutCallbackImport } from './routes/auth/_layout.callback'
import { Route as AuthLayoutPasswordForgotImport } from './routes/auth/_layout.password.forgot'

// Create Virtual Routes

const ExtensionImport = createFileRoute('/extension')()
const DashboardImport = createFileRoute('/dashboard')()
const AuthImport = createFileRoute('/auth')()

// Create/Update Routes

const ExtensionRoute = ExtensionImport.update({
  id: '/extension',
  path: '/extension',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ExtensionLayoutRoute = ExtensionLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => ExtensionRoute,
} as any)

const DashboardLayoutRoute = DashboardLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => DashboardRoute,
} as any)

const AuthLayoutRoute = AuthLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthRoute,
} as any)

const ExtensionLayoutRegisterRoute = ExtensionLayoutRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => ExtensionLayoutRoute,
} as any)

const ExtensionLayoutLoginRoute = ExtensionLayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => ExtensionLayoutRoute,
} as any)

const ExtensionLayoutCallbackRoute = ExtensionLayoutCallbackImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => ExtensionLayoutRoute,
} as any)

const DashboardLayoutHomeRoute = DashboardLayoutHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => DashboardLayoutRoute,
} as any)

const AuthLayoutRegisterRoute = AuthLayoutRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutLoginRoute = AuthLayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutCallbackRoute = AuthLayoutCallbackImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutPasswordForgotRoute = AuthLayoutPasswordForgotImport.update({
  id: '/password/forgot',
  path: '/password/forgot',
  getParentRoute: () => AuthLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/auth/_layout': {
      id: '/auth/_layout'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLayoutImport
      parentRoute: typeof AuthRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/_layout': {
      id: '/dashboard/_layout'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLayoutImport
      parentRoute: typeof DashboardRoute
    }
    '/extension': {
      id: '/extension'
      path: '/extension'
      fullPath: '/extension'
      preLoaderRoute: typeof ExtensionImport
      parentRoute: typeof rootRoute
    }
    '/extension/_layout': {
      id: '/extension/_layout'
      path: '/extension'
      fullPath: '/extension'
      preLoaderRoute: typeof ExtensionLayoutImport
      parentRoute: typeof ExtensionRoute
    }
    '/auth/_layout/callback': {
      id: '/auth/_layout/callback'
      path: '/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthLayoutCallbackImport
      parentRoute: typeof AuthLayoutImport
    }
    '/auth/_layout/login': {
      id: '/auth/_layout/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLayoutLoginImport
      parentRoute: typeof AuthLayoutImport
    }
    '/auth/_layout/register': {
      id: '/auth/_layout/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthLayoutRegisterImport
      parentRoute: typeof AuthLayoutImport
    }
    '/dashboard/_layout/home': {
      id: '/dashboard/_layout/home'
      path: '/home'
      fullPath: '/dashboard/home'
      preLoaderRoute: typeof DashboardLayoutHomeImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/extension/_layout/callback': {
      id: '/extension/_layout/callback'
      path: '/callback'
      fullPath: '/extension/callback'
      preLoaderRoute: typeof ExtensionLayoutCallbackImport
      parentRoute: typeof ExtensionLayoutImport
    }
    '/extension/_layout/login': {
      id: '/extension/_layout/login'
      path: '/login'
      fullPath: '/extension/login'
      preLoaderRoute: typeof ExtensionLayoutLoginImport
      parentRoute: typeof ExtensionLayoutImport
    }
    '/extension/_layout/register': {
      id: '/extension/_layout/register'
      path: '/register'
      fullPath: '/extension/register'
      preLoaderRoute: typeof ExtensionLayoutRegisterImport
      parentRoute: typeof ExtensionLayoutImport
    }
    '/auth/_layout/password/forgot': {
      id: '/auth/_layout/password/forgot'
      path: '/password/forgot'
      fullPath: '/auth/password/forgot'
      preLoaderRoute: typeof AuthLayoutPasswordForgotImport
      parentRoute: typeof AuthLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthLayoutRouteChildren {
  AuthLayoutCallbackRoute: typeof AuthLayoutCallbackRoute
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutRegisterRoute: typeof AuthLayoutRegisterRoute
  AuthLayoutPasswordForgotRoute: typeof AuthLayoutPasswordForgotRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutCallbackRoute: AuthLayoutCallbackRoute,
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutRegisterRoute: AuthLayoutRegisterRoute,
  AuthLayoutPasswordForgotRoute: AuthLayoutPasswordForgotRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

interface AuthRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface DashboardLayoutRouteChildren {
  DashboardLayoutHomeRoute: typeof DashboardLayoutHomeRoute
}

const DashboardLayoutRouteChildren: DashboardLayoutRouteChildren = {
  DashboardLayoutHomeRoute: DashboardLayoutHomeRoute,
}

const DashboardLayoutRouteWithChildren = DashboardLayoutRoute._addFileChildren(
  DashboardLayoutRouteChildren,
)

interface DashboardRouteChildren {
  DashboardLayoutRoute: typeof DashboardLayoutRouteWithChildren
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardLayoutRoute: DashboardLayoutRouteWithChildren,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface ExtensionLayoutRouteChildren {
  ExtensionLayoutCallbackRoute: typeof ExtensionLayoutCallbackRoute
  ExtensionLayoutLoginRoute: typeof ExtensionLayoutLoginRoute
  ExtensionLayoutRegisterRoute: typeof ExtensionLayoutRegisterRoute
}

const ExtensionLayoutRouteChildren: ExtensionLayoutRouteChildren = {
  ExtensionLayoutCallbackRoute: ExtensionLayoutCallbackRoute,
  ExtensionLayoutLoginRoute: ExtensionLayoutLoginRoute,
  ExtensionLayoutRegisterRoute: ExtensionLayoutRegisterRoute,
}

const ExtensionLayoutRouteWithChildren = ExtensionLayoutRoute._addFileChildren(
  ExtensionLayoutRouteChildren,
)

interface ExtensionRouteChildren {
  ExtensionLayoutRoute: typeof ExtensionLayoutRouteWithChildren
}

const ExtensionRouteChildren: ExtensionRouteChildren = {
  ExtensionLayoutRoute: ExtensionLayoutRouteWithChildren,
}

const ExtensionRouteWithChildren = ExtensionRoute._addFileChildren(
  ExtensionRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthLayoutRouteWithChildren
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/extension': typeof ExtensionLayoutRouteWithChildren
  '/auth/callback': typeof AuthLayoutCallbackRoute
  '/auth/login': typeof AuthLayoutLoginRoute
  '/auth/register': typeof AuthLayoutRegisterRoute
  '/dashboard/home': typeof DashboardLayoutHomeRoute
  '/extension/callback': typeof ExtensionLayoutCallbackRoute
  '/extension/login': typeof ExtensionLayoutLoginRoute
  '/extension/register': typeof ExtensionLayoutRegisterRoute
  '/auth/password/forgot': typeof AuthLayoutPasswordForgotRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthLayoutRouteWithChildren
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/extension': typeof ExtensionLayoutRouteWithChildren
  '/auth/callback': typeof AuthLayoutCallbackRoute
  '/auth/login': typeof AuthLayoutLoginRoute
  '/auth/register': typeof AuthLayoutRegisterRoute
  '/dashboard/home': typeof DashboardLayoutHomeRoute
  '/extension/callback': typeof ExtensionLayoutCallbackRoute
  '/extension/login': typeof ExtensionLayoutLoginRoute
  '/extension/register': typeof ExtensionLayoutRegisterRoute
  '/auth/password/forgot': typeof AuthLayoutPasswordForgotRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/_layout': typeof AuthLayoutRouteWithChildren
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/_layout': typeof DashboardLayoutRouteWithChildren
  '/extension': typeof ExtensionRouteWithChildren
  '/extension/_layout': typeof ExtensionLayoutRouteWithChildren
  '/auth/_layout/callback': typeof AuthLayoutCallbackRoute
  '/auth/_layout/login': typeof AuthLayoutLoginRoute
  '/auth/_layout/register': typeof AuthLayoutRegisterRoute
  '/dashboard/_layout/home': typeof DashboardLayoutHomeRoute
  '/extension/_layout/callback': typeof ExtensionLayoutCallbackRoute
  '/extension/_layout/login': typeof ExtensionLayoutLoginRoute
  '/extension/_layout/register': typeof ExtensionLayoutRegisterRoute
  '/auth/_layout/password/forgot': typeof AuthLayoutPasswordForgotRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/extension'
    | '/auth/callback'
    | '/auth/login'
    | '/auth/register'
    | '/dashboard/home'
    | '/extension/callback'
    | '/extension/login'
    | '/extension/register'
    | '/auth/password/forgot'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/extension'
    | '/auth/callback'
    | '/auth/login'
    | '/auth/register'
    | '/dashboard/home'
    | '/extension/callback'
    | '/extension/login'
    | '/extension/register'
    | '/auth/password/forgot'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/auth/_layout'
    | '/dashboard'
    | '/dashboard/_layout'
    | '/extension'
    | '/extension/_layout'
    | '/auth/_layout/callback'
    | '/auth/_layout/login'
    | '/auth/_layout/register'
    | '/dashboard/_layout/home'
    | '/extension/_layout/callback'
    | '/extension/_layout/login'
    | '/extension/_layout/register'
    | '/auth/_layout/password/forgot'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  DashboardRoute: typeof DashboardRouteWithChildren
  ExtensionRoute: typeof ExtensionRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
  ExtensionRoute: ExtensionRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/dashboard",
        "/extension"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth",
      "children": [
        "/auth/_layout"
      ]
    },
    "/auth/_layout": {
      "filePath": "auth/_layout.tsx",
      "parent": "/auth",
      "children": [
        "/auth/_layout/callback",
        "/auth/_layout/login",
        "/auth/_layout/register",
        "/auth/_layout/password/forgot"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard",
      "children": [
        "/dashboard/_layout"
      ]
    },
    "/dashboard/_layout": {
      "filePath": "dashboard/_layout.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/_layout/home"
      ]
    },
    "/extension": {
      "filePath": "extension",
      "children": [
        "/extension/_layout"
      ]
    },
    "/extension/_layout": {
      "filePath": "extension/_layout.tsx",
      "parent": "/extension",
      "children": [
        "/extension/_layout/callback",
        "/extension/_layout/login",
        "/extension/_layout/register"
      ]
    },
    "/auth/_layout/callback": {
      "filePath": "auth/_layout.callback.tsx",
      "parent": "/auth/_layout"
    },
    "/auth/_layout/login": {
      "filePath": "auth/_layout.login.tsx",
      "parent": "/auth/_layout"
    },
    "/auth/_layout/register": {
      "filePath": "auth/_layout.register.tsx",
      "parent": "/auth/_layout"
    },
    "/dashboard/_layout/home": {
      "filePath": "dashboard/_layout.home.tsx",
      "parent": "/dashboard/_layout"
    },
    "/extension/_layout/callback": {
      "filePath": "extension/_layout.callback.tsx",
      "parent": "/extension/_layout"
    },
    "/extension/_layout/login": {
      "filePath": "extension/_layout.login.tsx",
      "parent": "/extension/_layout"
    },
    "/extension/_layout/register": {
      "filePath": "extension/_layout.register.tsx",
      "parent": "/extension/_layout"
    },
    "/auth/_layout/password/forgot": {
      "filePath": "auth/_layout.password.forgot.tsx",
      "parent": "/auth/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
